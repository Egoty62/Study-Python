# 로깅(logging)은 로그를 관리하는 기법
    # 이동, 클릭 등 프로그램을 사용할 때 하는 모든 기본적인 이벤트를 저장하는 것을 로그정보를 저장한다고 함
        # 프로그램이 실행되는 동안 일어나는 정보를 파일 or 기록으로 남기는 일을 로깅이라 함
        # 로그 정보는 이러한 행동 정보 말고도 많은 것을 저장함
            # ex) 예외를 찾아내는 일, 특정 함수를 사용하는 시간, DB 입출력 시간 등

# 로그를 기록하는 방법 중 가장 일반적인 것을 파일을 생성하여 로그 정보를 남기는 것
    # 처음 프로그램을 실행할 때 로그 파일 하나를 생성
        # 그 후에 발생하는 이벤트를 로그파일에 저장

# 로그 데이터는 프로그램을 실행하는 단계에서만 관리하지는 않음
    # 필요에 따라 개발, 운영, 배포 등 다양한 플그램의 수명 주기에 따라 기록을 남기고 저장
    # 때로는 치명적 문제점에 대한 기록, 단순한 접근, 잘못된 데이터 활용에 대한 경고 등을 저장
        # 수준별로 다양하게 로그 기록을 관리

import logging

logging.debug("디버그_01")
logging.info("정보확인_01")
logging.warning("주의_01")
logging.error("에러발생_01")
logging.critical("치명적 에러_01")

# 위의 코드는 정확히 어떤 결과가 나오는지 예상하기 어려움
    # cuz 파이썬 로깅을 실행할 때 로깅 레벨(logging level)을 지정할 수 있음
        # 이 로깅 레벨은 총 5단계로 나뉘어짐
        # 프로그램의 진행 상황이나 실항 단계에 따라 이 출력을 설정할 수 있음
            # 필요한 곳에 로깅을 출력하는 코드를 넣고, 설정에 따라 실행 시점에 출력 여부 조정 가능
        # 로깅의 출력 단계 (5단계)
            # 1. DEBUG : 개발 시점의 프로그램이 문제없이 실행되는지 확인하기 위해 출력하는 결과
            # 2. INFO : 기본적으로 사용자에게 실행 결과를 알려주는 로그 정보
                # 누군가 접속 했거나, 데이터베이스에 연결했거나, 서버가 시작했을 때 기록을 남길 수 있음
            # 3. WARNING : 문제가 될 수 있는 상황을 기록
                # 예외를 활용하여 처리해도 발생
                # 프로그램에서 실행해야 하는 모듈의 버전이 맞지 않을 때도 발생할 수 있음
            # 4, 5. ERROR, CRITICAL : 에러 발생 & 프로그램에 더는 수행하기 어려울 때 발생
                # 접속해야 하는 데이터베이스가 꺼져있거나, 접속량이 많아 서버가 응답하지 않을 경우

# 개발자는 프로그램을 개발할 때 로그를 남기는 방식에 대해 다른 개발자와 협업해야 함
# 처음부터 좋은 로그 정보를 모아야 프로그램의 유지보수에 많은 도움이 됨
    # 규모가 큰 프로그램을 작성할 때에는 반드시 로깅을 남기는 전략에 대해 고민하는 것이 좋음

# 파이썬에서 로깅을 사용하기 위해서는 Logger 객체를 활용해야함
    # 위의 코드에선 Logger 객체를 따로 만들지 않음
        # 기본 logging 모듈이 Logger를 사용하고 있기 때문

logger = logging.getLogger("main")  # Logger 선언
stream_hander = logging.StreamHandler() # Logger의 출력 방법 선언
logger.addHandler(stream_hander)    # Logger의 출력 등록

logger.setLevel(logging.DEBUG)  # DEBUG 대신 다른 단계로 설정하면 해당 단계부터 시작함
logger.debug("디버그_02")
logger.info("정보확인_02")
logger.warning("주의_02")
logger.error("에러발생_02")
logger.critical("치명적 에러_02")